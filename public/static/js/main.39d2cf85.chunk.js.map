{"version":3,"sources":["SpaceX_logo.png","components/LaunchItem.js","components/MissionKey.js","components/Launches.js","components/Launch.js","App.js","reportWebVitals.js","index.js"],"names":["LaunchItem","launch","flight_number","mission_name","launch_date_local","launch_success","console","log","className","classNames","format","to","MissionKey","LAUNCHES_QUERY","gql","Launches","useQuery","loading","error","data","networkStatus","NetworkStatus","refetch","launches","map","Launch","props","match","params","parseInt","LAUNCH_QUERY","launch_year","rocket","rocket_id","rocket_name","rocket_type","client","ApolloClient","uri","cache","InMemoryCache","App","src","logo","alt","style","width","display","margin","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.39d2cf85.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/SpaceX_logo.1180b5d3.png\";","import React from 'react'\nimport classNames from 'classnames'\nimport Moment from 'react-moment';\nimport {Link} from 'react-router-dom';\n\nexport default function LaunchItem({launch : {flight_number, mission_name, launch_date_local, launch_success}}) {\n    //console.log(props.launch)\n    console.log(flight_number, launch_success)\n    return <div className= \"card card-body mb-3\">\n\n            <div className=\"row\">\n\n                <div className=\"col-md-9\">\n                    <h4>\n                        Mission:{' '}\n                        <span className={classNames({\n                            'text-success': launch_success,\n                            'text-danger': !launch_success\n                            })}>\n                                {mission_name}\n                        </span>\n                    </h4>\n                    <p>Data: <Moment format=\"YYYY-MM-DD HH:mm\">{launch_date_local}</Moment></p>\n                </div>\n\n                <div className=\"col-md-3\">\n                    <Link to={`/launch/${flight_number}`} className=\"btn btn-secondary \">Launch details</Link>\n                </div>\n\n            </div>\n\n        </div>\n    \n}\n","import React from 'react'\n\nexport default function MissionKey() {\n    return (\n        <div className=\"my-3\">\n            <p>\n                <span className=\"px-3 mr-2 text-success\">Success</span>\n                {//how to create a color box for this???z\n                }\n            </p>\n            <p>\n                <span className=\"px-3 mr-2 text-danger\">Fail</span>\n            </p>\n            \n        </div>\n    )\n}\n","import React  from 'react'\n\nimport {\n    useQuery,\n    gql,\n    NetworkStatus\n} from \"@apollo/client\";\n\nimport LaunchItem from './LaunchItem';\nimport MissionKey from './MissionKey';\n\nconst LAUNCHES_QUERY=gql`\nquery LaunchesQuery {\n    launches{\n        flight_number\n        mission_name\n        launch_date_local\n        launch_success\n    }\n}\n`;\n\nconst Launches =()=>{\n//const { loading, error, data } = useQuery(LAUNCHES_QUERY);\n    //console.log(useQuery(LAUNCHES_QUERY));\n\nconst { loading, error, data, networkStatus } = useQuery(\n    LAUNCHES_QUERY\n    //{notifyOnNetworkStatusChange:true}\n);\n\n\n//if (loading) return <p>Loading...</p>;\n//if (error) return <p>Error :({console.log(data, loading, error)}</p>; \n\n\n\nif (networkStatus === NetworkStatus.refetch) return 'Refetching!';\nif (loading) return 'Loading...';\nif (error) return `Error! ${error}`;\n\n//console.log(data);\nreturn <div>\n    <h1 className=\"display-4 my-3\">Launches</h1>\n    <MissionKey/>\n    {\n    data.launches.map(launch =>(\n        <LaunchItem key={launch.flight_number} launch={launch}/>\n    ))\n    }\n    </div>\n}\n\nexport default Launches;\n","import React from 'react';\nimport {\n    useQuery,\n    gql,\n    NetworkStatus\n} from \"@apollo/client\";\n\nimport classNames from 'classnames';\n// eslint-disable-next-line no-unused-vars\nimport {Link} from 'react-router-dom';\n//import { parse } from 'graphql';\n\n//mion 18 https://www.youtube.com/watch?v=DKzprvzbS14&t=204s\n\n//unir esta madre + + \nconst LAUNCH_QUERY_UNO=`\nquery LaunchQuery {\n    launch(flight_number:\n`;\n\nconst LAUNCH_QUERY_DOS=`){\n        flight_number\n        mission_name\n        launch_year\n        launch_success\n        launch_date_local,\n        rocket{\n            rocket_id\n            rocket_name\n            rocket_type\n        }\n    }\n}\n`;\n\nconst Launch =(props)=>{\n    let {flight_number } =props.match.params;\n    flight_number=parseInt(flight_number);\n    let LAUNCH_QUERY= gql(LAUNCH_QUERY_UNO+flight_number+LAUNCH_QUERY_DOS)\n\n    const { loading, error, data, networkStatus} = useQuery(\n        LAUNCH_QUERY,\n        flight_number\n        //this maybe be the problem...\n        //{notifyOnNetworkStatusChange:true}\n    );\n    if (networkStatus === NetworkStatus.refetch) return 'Refetching!';\n    if (loading) return 'Loading...';\n    if (error) return `Error! ${error}`;\n    const {mission_name, launch_success, launch_year, rocket:{rocket_id, rocket_name, rocket_type}} = data.launch;\n    return <div>\n        <h1 className=\"display-4 my-3\">\n            <span className=\"text-dark\">Mission:</span>\n            {' '}\n            {data.launch.mission_name}\n        </h1>\n        <h4 className=\"mb-3\">Launch Details</h4>\n        <ul className=\"list-group\">\n            <li className=\"list-group-item\">\n                Flight_number: {flight_number}\n            </li>\n            <li className=\"list-group-item\">\n                Launch_year: {launch_year}\n            </li>\n            <li className=\"list-group-item\">\n                Mission_name: {mission_name}\n            </li>\n            <li className=\"list-group-item\">\n                Launch successful:{' '}\n                <span className={classNames({\n                'text-success': launch_success,\n                'text-danger': !launch_success\n                })}>\n                    {launch_success ? \"Yes\" : \"No\"}\n                </span>\n            </li>\n        </ul>\n\n        <h4 className=\"my-3\">Rocket Details</h4>\n        <ul className=\"list-group\">\n            <li className=\"list-group-item\">\n                Rocket_ID: {rocket_id}\n            </li>\n            <li className=\"list-group-item\">\n                Rocket_name: {rocket_name}\n            </li>\n            <li className=\"list-group-item\">\n                Rocket_type: {rocket_type}\n            </li>\n        </ul>\n        <Link to=\"/\" className=\"btn btn-secondary\">Back</Link>\n\n    </div>\n}\n\nexport default Launch\n","import './App.css';\nimport logo from './SpaceX_logo.png';\nimport React from \"react\";\nimport {BrowserRouter as Router, Route} from 'react-router-dom'\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider\n} from \"@apollo/client\";\nimport Launches from '../src/components/Launches';\nimport Launch from '../src/components/Launch';\n\nconst client = new ApolloClient({\n  uri: '/graphql',\n  //uri: 'http://localhost:5000/graphql',\n  cache: new InMemoryCache()\n});\n\n/*function Launches() {\n  const { loading, error, data } = useQuery(gql`\n  query LaunchesQuery {\n    launches{\n        flight_number\n        mission_name\n        launch_date_local\n        launch_sucess\n    }\n}\n  `);\n  <h1 className=\"display-4 my-3\">Launches</h1>\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error :({console.log(error)}</p>; \n\n    console.log(data)\n    return <h1>test</h1>\n\n}*/\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div className=\"container\">\n          \n          <img src={logo} alt=\"SpaceX\" style={{width: 300, display:\"block\", margin:\"auto\"}}></img>\n          <Route exact path=\"/\" component={Launches}/>\n          <Route exact path=\"/launch/:flight_number\" component={Launch}/>\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n\n"],"sourceRoot":""}